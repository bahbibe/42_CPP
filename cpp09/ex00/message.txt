'''int ft_stoi(const char* str)
{
    errno = 0;
    char *endptr;
    long value = strtol(str, &endptr, 10);
    if (!isdigit(*str) || endptr == str || *endptr)
        throw std::invalid_argument(str);
    if (errno == ERANGE || value > INT_MAX || value < INT_MIN)
        throw std::out_of_range(str);
    return value;
}

bool    isLeapYear(int year)
{
    return (!year % 4 || !year % 400) && year % 100;
}

std::string& getDate(std::string& date)
{
    std::string year, month, day;
    std::stringstream sstream;
    sstream << date;
    getline(sstream, year, '-');
    getline(sstream, month, '-');
    sstream >> day;
    int mday, mon, yr;
    yr =  ft_stoi(year.c_str());
    mon = ft_stoi(month.c_str());
    mday = ft_stoi(day.c_str());
    if (yr < 2009  || mon < 1 || mon > 12  || mday < 1 || mday > 31)
        throw std::invalid_argument(date);
    if (mon == 2 && !isLeapYear(yr) && mday > 28)
        throw std::invalid_argument(date);
    return date;
}


float   getValue(const char* entry)
{
    char *endptr = NULL;
    float value = strtof(entry, &endptr);
    if (!isdigit(*entry) || endptr == entry || *endptr)
        throw std::invalid_argument(entry);
    if (errno == ERANGE || value < 0 || value > 1000)
    {
        errno = 0;
        throw std::out_of_range(entry);
    }
    return value;
}

void loadDatabase(const char* database, std::map<std::string, float>& map)
{
    std::ifstream infile(database);
    if (!infile.is_open())
        throw std::ios_base::failure("failed to open database file");
    std::string entry;
    std::getline(infile, entry);
    while(std::getline(infile, entry))
    {
        std::stringstream sstream;
        std::string date, value;
        sstream << entry;
        getline(sstream, date, ',');
        sstream >> value;
        map[date] = atof(value.c_str());
    }
}

void    printExchange(std::map<std::string, float>& map, std::string date, float value)
{
    std::map<std::string, float>::iterator it = map.upper_bound(date);
    if (it == map.begin())
        throw std::invalid_argument(date);
    it--;
    std::cout << date << " => " << value << " = " << map[it->first] * value << std::endl;
}

void    readInput(const char* input, std::map<std::string, float>& map)
{
    std::ifstream infile(input);
    if (!infile.is_open())
        throw  std::ios_base::failure("failed to open input file");
    std::string entry;
    getline (infile, entry);
    if (entry != "date | value")
        throw std::invalid_argument(entry);
    std::string date, del, value;
    int dateLength;
    while (getline (infile, entry))
    {
        std::stringstream ss;
        ss << entry;
        ss >> date;
        ss >> del;
        ss >> value;
        try
        {
            dateLength = date.length();
            if (del != "|" 
                || entry.length() != dateLength + del.length() + value.length() + 2
                || entry[dateLength] != ' ')
                throw std::invalid_argument(entry);
            printExchange(map, getDate(date), getValue(value.c_str()));
        }
        catch (const std::exception& e)
        {
            std::cout << "Error: bad input => " << e.what() << std::endl;
        }
    }
}'''